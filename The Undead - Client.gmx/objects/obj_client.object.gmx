<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Client creation

Socket = network_create_socket(network_socket_tcp);
network_set_timeout(Socket, 3000, 3000); // Make configurable
//isConnected = network_connect(Socket, "127.0.0.1" , 63258); // Make configurable
Buffer = buffer_create(1024, buffer_fixed, 1);
result = 0;
ping = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Send ping
buffer_seek(Buffer, buffer_seek_start, 0);
buffer_write(Buffer, buffer_u8, 1);
buffer_write(Buffer, buffer_u32, current_time);
result = network_send_packet(Socket, Buffer, buffer_tell(Buffer));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Receive data from server
var type_event = ds_map_find_value(async_load, "type");
switch(type_event) {
   case network_type_data:
      var buffer = ds_map_find_value(async_load, "buffer");
      buffer_seek(buffer, buffer_seek_start, 0);
      received_packets(buffer);
   break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Remove client and buffer
network_destroy(Socket);
buffer_delete(Buffer);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Utility drawing

var c1 = c_black;
var c2 = c_red;

/** Draw ping */
var draw_ping_x = 10;
var draw_ping_y = 40;
draw_set_color(c_white);
draw_set_alpha(0.4);
// Draw rectangle
if (ping &lt; 1) {
    draw_rectangle(view_xview[view_current] + draw_ping_x - 5, view_yview[view_current] + draw_ping_y - 5, view_xview[view_current] + draw_ping_x + 126, view_yview[view_current] + draw_ping_y + 20, 0);
}
else if (ping &lt; 100) {
    draw_rectangle(view_xview[view_current] + draw_ping_x - 5, view_yview[view_current] + draw_ping_y - 5, view_xview[view_current] + draw_ping_x + 104, view_yview[view_current] + draw_ping_y + 20, 0);
}
else if (ping &lt; 1000) {
    draw_rectangle(view_xview[view_current] + draw_ping_x - 5, view_yview[view_current] + draw_ping_y - 5, view_xview[view_current] + draw_ping_x + 116, view_yview[view_current] + draw_ping_y + 20, 0);
}
else {
    draw_rectangle(view_xview[view_current] + draw_ping_x - 5, view_yview[view_current] + draw_ping_y - 5, view_xview[view_current] + draw_ping_x + 124, view_yview[view_current] + draw_ping_y + 20, 0);
}
draw_set_alpha(1);
// Draw text
if (ping &lt; 1) {
    draw_text_color(view_xview[view_current] + draw_ping_x, view_yview[view_current] + draw_ping_y, "No connection", c1, c1, c2, c2, 1);
}
else if (ping &lt; 1000) {
    draw_text_color(view_xview[view_current] + draw_ping_x, view_yview[view_current] + draw_ping_y, "Ping: " + string(ping) + " ms", c1, c1, c2, c2, 1);
}
else {
    draw_text_color(view_xview[view_current] + draw_ping_x, view_yview[view_current] + draw_ping_y, "Ping: 999+ ms", c1, c1, c2, c2, 1);
}


/** Draw FPS */
var draw_fps_x = 10;
var draw_fps_y = 10;
draw_set_color(c_white);
draw_set_alpha(0.4);
// Draw rectangle
if (room_speed &lt; 100) {
    draw_rectangle(view_xview[view_current] + draw_fps_x - 5, view_yview[view_current] + draw_fps_y - 5, view_xview[view_current] + draw_fps_x + 116, view_yview[view_current] + draw_fps_y + 20, 0);
}
else {
    draw_rectangle(view_xview[view_current] + draw_fps_x - 5, view_yview[view_current] + draw_fps_y - 5, view_xview[view_current] + draw_fps_x + 134, view_yview[view_current] + draw_fps_y + 20, 0);
}
draw_set_alpha(1);
draw_set_color(c_black);
// Draw text
draw_text_color(view_xview[view_current] + draw_fps_x, view_yview[view_current] + draw_fps_y, "FPS: " + string(fps) + " / " + string(room_speed), c1, c1, c2, c2, 1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
