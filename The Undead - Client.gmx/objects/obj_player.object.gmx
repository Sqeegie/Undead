<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_character</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_character_smask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables
turnrate=8*(60/max(room_speed,1)) //The desired turnrate, adjusted for the high room speed
currentrotation=(point_direction(x,y,mouse_x,mouse_y)) //The current desired rotation is the mouse
speedmod=1 //This is multiplied by all the movement speeds (strafing, forwards, backwards)
sprint=2
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

/*
var a,b;
a = place_free(x+hspeed*1.5,y);
b = place_free(x,y+vspeed*1.5);

if not (a) { 
    x = xprevious; 
}
if not (b) {
    y = yprevious;
}
if not (place_free(x+hspeed*1.5,y+vspeed*1.5)) {
    x = xprevious;
    y = yprevious;
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>currentrotation=point_direction(x,y,mouse_x,mouse_y)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Limited Rotation Speed
x = self.x
y = self.y
// angle towards which rotation is being done:
target_angle = point_direction(x, y, mouse_x, mouse_y)
// turret base angle:
base_angle = self.image_angle
// find difference between target and base angle, and limit it:
delta = max(-30, min(30, angle_difference(target_angle, base_angle)))
// rotate towards computed angle:
image_angle = angle_rotate(image_angle, base_angle + delta, turnrate)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement
direction = image_angle;
//Take care of speed :
if keyboard_check(ord("W")) {
    speed = (4*speedmod)*(60/max(room_speed,1))//Takes the initial speed, multiplies by a modifier (default 1, used for broken legs and such), then adjusts for the high room speed
    }
    else {
    speed = 0; //Makes the dude stop
    }

//Take care of strafing
var strafe = 0;
if keyboard_check(ord("A")) {
    strafe -= (4*speedmod)*(60/max(room_speed,1));
    }
if keyboard_check(ord("D")) {
    strafe += (4*speedmod)*(60/max(room_speed,1));
    }
if strafe != 0 {
x += lengthdir_x(strafe,direction-90);
y += lengthdir_y(strafe,direction-90);
    }
//Basic Sprint
if keyboard_check_direct(vk_lshift) {
    speedmod=sprint
    //Put ttamina here, etc
    }
    else {
    speedmod=1
        }
        
        
        
        
        
        
        
//Some code courtesy of https://www.reddit.com/r/gamemaker/comments/2h9csl/how_to_make_an_object_move_towards_the_mouse/
//Note that he forgot to add the if strafe != 0, so it was continually strafing
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_solid">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if collision_rectangle(bbox_left-speed, bbox_top,bbox_right+speed,bbox_bottom,obj_solid,true,false) {

  if bbox_left&lt;other.bbox_right+speed then move_bounce_all(true)

  else if bbox_right&gt;other.bbox_left-speed then move_bounce_all(true)

} else {

  if bbox_top&lt;other.bbox_bottom+speed then move_bounce_all(true);

  else if bbox_bottom&gt;other.bbox_top-speed then move_bounce_all(true)
}


/*
motion_add(point_direction(other.x,other.y,x,y),speed);
move_outside_solid(point_direction(other.x,other.y,x,y),5);
//
if collision_rectangle(bbox_left-speed, bbox_top,bbox_right+speed,bbox_bottom,obj_solid,false,false) {

  if bbox_left&lt;other.bbox_right+speed then move_contact_all(180,speed);

  else if bbox_right&gt;other.bbox_left-speed then move_contact_all(0,speed);

} else {

  if bbox_top&lt;other.bbox_bottom+speed then move_contact_all(90,speed);

  else if bbox_bottom&gt;other.bbox_top-speed then move_contact_all(270,speed);
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
