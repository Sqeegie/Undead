{\rtf1\ansi\ansicpg1252\deff0\deflang1036\deflangfe1041{\fonttbl{\f0\fswiss\fprq2\fcharset0 Arial;}{\f1\fmodern\fprq1\fcharset0 Courier New;}}
{\colortbl ;\red128\green0\blue0;\red128\green128\blue128;\red128\green128\blue0;\red0\green128\blue0;}
{\*\generator Msftedit 5.41.21.2508;}\viewkind4\uc1\pard\nowidctlpar\b\f0\fs40 4 - Fonctions\b0\fs20\par
\par
Certains scripts composant \i SmartLight \i0 comportent des arguments et sont con\'e7us pour \'eatre utilis\'e9s comme des fonctions.\par
\par
\par
\cf1\lang1033\b\fs22 SL_light_cast_obj(obj_index,mask)\fs20\par
\cf0\b0\par
\lang1036 Fonction devant \'eatre appel\'e9e localement \'e0 partir d'un objet \i light\i0 , et permettant d'attribuer \'e0 ce dernier des objets \'e0 ombrer. En d'autres termes, elle permet de d\'e9terminer pour quels objets la lumi\'e8re doit projeter une ombre.\par
\par
\ul Arguments:\ulnone\par
\par
\b\i obj_index\b0\i0  : Index de l'objet devant occluder la lumi\'e8re, formant ainsi une ombre.\par
\par
\b\i mask\b0\i0  : Index de la sprite devant \'eatre utilis\'e9e pour projeter l'ombre, \'e0 la place de la sprite de l'objet. Pour ne pas utiliser de mask et donc faire en sorte que la sprite projet\'e9e soit celle de l'objet elle-m\'eame, indiquez simplement -1.\par
\par
\lang1033\ul Exemple:\ulnone\par
\par
\cf2\b\f1 SL_light_cast_obj(obj_character,-1);\par
\par
\par
\cf1\f0\fs22 SL_global_cast_obj(layer,obj_index,spr_index,sun,amb)\fs20\par
\cf0\b0\par
\lang1036 Fonction devant \'eatre appel\'e9e localement \'e0 partir de l'objet \i engine\i0 , et permettant de d\'e9finir les objets devant b\'e9n\'e9ficier d'une ombre globale. Le terme "ombres globales" d\'e9signe les ombres solaires et les ombres ambiantes, soit des ombres affectant l'ensemble des objets \'e0 l'\'e9cran. Les arguments \b\i sun\b0\i0  et \b\i amb\b0\i0  permettent de s\'e9lectionner les types de rendus d'ombres globales \'e0 effectuer parmi les trois disponibles:\par
\par
 - Ombre solaire projet\'e9e ( \b\i sun\b0\i0  = 1 ): l'objet projette une ombre provenant du soleil, calcul\'e9e automatiquement \'e0 partir de sa sprite. Si vous d\'e9sirez utiliser une autre sprite que celle de l'objet, vous pouvez d\'e9finir un mask avec l'argument \b\i spr_index\b0\i0 . Cette option est pr\'e9f\'e9rable pour des objets tels que des murs, caisses, barils, v\'e9hicules etc.\par
\par
- Ombre solaire projet\'e9e \'e0 partir d'une texture ( \b\i sun\b0\i0  = 2 ): l'objet projette une ombre provenant du soleil, calcul\'e9e \'e0 partir d'une texture pr\'e9d\'e9finie et affich\'e9e \'e0 partir de l\rquote origine de l\rquote objet. La texture en question doit \'eatre d\'e9finie avec l'argument \b\i spr_index\b0\i0 . Cette option est pr\'e9f\'e9rable pour des objets tels que des arbres ou des buissons.\par
\par
- Ombre ambiante ( \b\i amb\b0\i0  = 1 ): l'objet projette une ombre douce r\'e9sultante de l'illumination globale.\par
\par
\ul Arguments:\ulnone\par
\par
\b\i layer\b0\i0  : Index du layer dans lequel l'ombre de l'objet doit \'eatre affich\'e9e. Le syst\'e8me de layers permet de donner un effet de volume au rendu des ombres en faisant en sorte que les objets d'un layer donn\'e9 (par exemple le layer 2) projettent leurs ombres sur les objets des layers inf\'e9rieurs (dans notre exemple, les layers 1 et 0). Plus nombreux sont les layers, plus nombreuses sont les surfaces utilis\'e9es.\par
\par
\b\i obj_index\b0\i0  : Index de l'objet devant projeter une ombre globale.\par
\par
\b\i spr_index\b0\i0  : Cette variable joue un r\'f4le diff\'e9rent selon le type de rendu d'ombre solaire utilis\'e9. Pour \b\i sun \b0\i0 = 1, elle d\'e9signe le mask \'e0 utiliser pour la projection dynamique de l'ombre (indiquez -1 pour ne pas utiliser de mask). Pour \b\i sun \b0\i0 = 2, elle d\'e9signe l'index de la texture devant \'eatre utilis\'e9e pour la projection de l'ombre textur\'e9e.\par
\par
\b\i sun\b0\i0  : D\'e9termine le type de rendu d'ombre solaire \'e0 effectuer. Valeurs: 1 ombre projet\'e9e, 2 ombre textur\'e9e, 0 d\'e9sactiv\'e9.\par
\par
\b\i amb\b0\i0  : Active/d\'e9sactive le rendu de l'ombre ambiante. Valeur bool\'e9enne (true / false). Assurez-vous d'avoir g\'e9n\'e9r\'e9 une ambient map pour la ou les sprite(s) de votre objet avec la fonction \cf1\i SL_sprite_set_ambient(spr_index)\cf0\i0 .\par
\par
\lang1033\ul Exemples:\ulnone\par
\par
\cf2\b\f1 SL_global_cast_obj(2,obj_tree,spr_tree_shadow,2,1); // D\'e9signe l'objet obj_tree comme devant projeter une ombre solaire textur\'e9e et une ombre ambiante dans le layer 2\par
\par
SL_global_cast_obj(1,obj_character,-1,1,1); // D\'e9signe l'objet obj_character comme devant projeter une ombre solaire et une ombre ambiante dans le layer 1\cf0\lang1036\b0\f0\par
\par
\par
\cf1\b\fs22 SL_cast_sprite(layer,castsun,castamb,castlights,sprite,subimg,x,y,z,xscale,yxscale,rot,alpha)\cf2\lang1033\f1\fs20\par
\cf0\b0\f0\fs14\par
\lang1036\fs20 Affiche une ombre \'e0 partir d\rquote une simple sprite, contrairement aux fonctions pr\'e9c\'e9dentes qui projettent des ombres \'e0 partir d\rquote objets. Elle peut \'eatre appel\'e9e \'e0 partir de n\rquote importe quel objet, et doit \'eatre ex\'e9cut\'e9e \'e0 chaque step \'e0 la mani\'e8re d\rquote une fonction draw native; elle n\rquote affiche cependant pas la sprite en elle-m\'eame, mais uniquement les ombres. \par
\par
Le moment d\rquote ex\'e9cution de cette fonction doit \'eatre configur\'e9 avec pr\'e9caution. Si son ex\'e9cution se produit apr\'e8s celle du script \cf3\i SL_engine_render\cf0\i0  de l\rquote objet \i engine\i0 , la sprite cens\'e9e \'eatre affich\'e9e au step courant ne sera pas prise en compte dans le rendu, ce qui cr\'e9era un effet de d\'e9calage. Assurez-vous donc que cette fonction soit ex\'e9cut\'e9e avant que le rendu soit effectu\'e9 (dans un \'e9v\'e9nement \b\i Step\b0\i0  ou \b\i Begin Step\b0\i0  par exemple).\par
\par
\ul Arguments:\ulnone\par
\par
\b\i layer\b0\i0  : Index du layer dans lequel les ombres doivent \'eatre affich\'e9es. Ne concerne que l\rquote affichage des ombres solaires et ambiantes; vous pouvez y inscrire -1 si vous ne comptez afficher des ombres qu\rquote avec les lumi\'e8res dynamiques.\par
\par
\b\i castsun\b0\i0  : D\'e9termine si une ombre solaire doit \'eatre projet\'e9e. Valeur bool\'e9enne (true / false).\par
\par
\b\i castamb\b0\i0  : D\'e9termine si une ombre ambiante doit \'eatre affich\'e9e. Valeur bool\'e9enne (true / false).\par
\par
\b\i castlights\b0\i0  : D\'e9termine si des ombres provenant des lumi\'e8res dynamiques doivent \'eatre projet\'e9es. Chaque source lumineuse projettera alors une ombre pour cette sprite. Valeur bool\'e9enne (true / false).\par
\par
\b\i z\b0\i0\~: altitude de la sprite par rapport au sol. Cette valeur n\rquote affecte que le rendu des ombres solaires, et agit par multiplication de la valeur de longueur des ombres.\par
\par
Les arguments restants sont identiques \'e0 ceux de la fonction native\b  draw_sprite_ext\b0 .\par
\par
\lang1033\ul Exemple:\ulnone\par
\par
\cf2\b\f1 SL_cast_sprite(0,1,1,1,spr_object,0,42,42,0,1,1,0,1);\f0\par
\cf0\lang1036\b0\par
\par
\cf1\lang1033\b\fs22 SL_add_light(object)\fs20\par
\cf0\b0\par
\lang1036 D\'e9finit un objet comme \'e9tant une lumi\'e8re. Elle peut \'eatre appel\'e9e \'e0 partir de n\rquote importe quel objet et \'e9v\'e9nement, mais seulement apr\'e8s que \cf3\i SL_engine_ini_begin\cf0\i0  ait \'e9t\'e9 ex\'e9cut\'e9: il est donc g\'e9n\'e9ralement pr\'e9f\'e9rable de l'ex\'e9cuter lors de l'initialisation de l'objet \i engine\i0 .\par
\par
\ul Argument:\ulnone\par
\par
\b\i object\b0\i0  : Index de l'objet \'e0 d\'e9finir comme \'e9tant une lumi\'e8re. \par
\par
\lang1033\ul Exemple:\ulnone\par
\par
\cf2\b\f1 SL_add_light(obj_light01); // L'objet obj_light01 peut maintenant \'eatre utilis\'e9 comme lumi\'e8re dynamique\cf0\lang1036\b0\f0\par
\par
\par
\cf1\lang1033\b\fs22 SL_draw_sprite_light(sprite,subimg,x,y,xscale,yscale,rot,color,alpha)\fs20\par
\cf0\b0\par
\lang1036 Affiche une sprite dans le buffer de lumi\'e8re. A la diff\'e9rence d'une fonction draw classique, elle peut \'eatre appel\'e9e dans n'importe quel \'e9v\'e9nement (\b\i Step\b0\i0  par exemple), et pas n\'e9cessairement \b\i Draw\b0\i0 . En pratique, cette fonction permet de cr\'e9er des effets de lumi\'e8re basiques ne n\'e9cessitant pas de rendu avanc\'e9.\par
\par
Ses arguments sont identiques \'e0 ceux de la fonction native \b\i draw_sprite_ext\b0\i0 .\par
\par
\lang1033\ul Exemple:\ulnone\par
\par
\cf2\b\f1 SL_draw_sprite_light(spr_light,0,300,20,1,1,0,c_orange,0.8);\cf0\b0\f0\par
\par
\par
\cf1\b\fs22 SL_draw_sprite_shadow(layer,sprite,subimg,x,y,xscale,yscale,rot,alpha)\fs20\par
\cf0\b0\par
\lang1036 Affiche une sprite dans le buffer d'ombre (cette fonction est similaire \'e0 \cf1\i SL_draw_sprite_light\cf0 ). \i0 Elle s'utilise quasiment de la m\'eame mani\'e8re que la fonction native \b\i draw_sprite_ext\b0\i0 , \'e0 quelques diff\'e9rences pr\'e8s: elle peut \'eatre appel\'e9e dans n'importe quel \'e9v\'e9nement (\b\i Step\b0\i0  par exemple), et elle ne comporte pas d'argument \b\i color\b0\i0 . En pratique, cette fonction peut \'eatre utile pour ombrer certaines zones de votre map sans pour autant utiliser d'objets (dans le cas par exemple de l'int\'e9rieur d'un b\'e2timent).\par
\par
\ul Argument:\ulnone\par
\par
\b\i layer\b0\i0  : Index du layer dans lequel la sprite doit \'eatre affich\'e9e.\par
\par
\lang1033\ul Exemple:\ulnone\par
\par
\cf2\b\f1 SL_draw_sprite_shadow(1,spr_object,0,50,30,1,1,0,0.8);\f0\par
\par
\par
\cf1\fs22 SL_sprite_set_ambient(spr_index)\cf0\lang1036\b0\fs20\par
\par
G\'e9n\'e8re une ambient map pour la sprite d'index \b\i spr_index\b0\i0 , indispensable au rendu des ombres ambiantes. Les sous-images (composant les sprites anim\'e9es) sont automatiquement prises en compte. La fonction doit \'eatre appel\'e9e localement \'e0 partir de l'objet \i engine\i0  (vous pouvez user de l'instruction \b with\b0  si vous d\'e9sirez l'appeler \'e0 partir d'un autre objet).\par
\par
\ul Argument:\ulnone\par
\par
\b\i spr_index\b0\i0  : Index de la sprite pour laquelle une ambient map doit \'eatre g\'e9n\'e9r\'e9e. \par
\par
\lang1033\ul Exemple:\ulnone\par
\par
\cf2\b\f1 SL_sprite_set_ambient(spr_character); // G\'e9n\'e8re une ambient map pour la sprite spr_character.\f0\par
\par
\cf0\lang1036\b0\par
\cf1\lang1033\b\fs22 SL_set_time(time)\cf0\lang1036\b0\fs20\par
\lang1033\par
\lang1036 Initialise / modifie l'heure courante. La modification de l'heure ne peut se faire qu'avec cette fonction, la variable \cf4\i global.sl_time\cf0\i0  \'e9tant en lecture seule. La fonction doit \'eatre appel\'e9e localement \'e0 partir de l'objet \i engine\i0  (vous pouvez user de l'instruction \b with\b0  si vous d\'e9sirez l'appeler \'e0 partir d'un autre objet).\par
\par
\ul Argument:\ulnone\par
\par
\b\i time\b0\i0  : L'heure \'e0 laquelle vous d\'e9sirez r\'e9gler l'horloge. La valeur entr\'e9e doit \'eatre sup\'e9rieure ou \'e9gale \'e0 0 et inf\'e9rieure \'e0 24 (pour plus de pr\'e9cisions sur le fonctionnement de la variable d'heure \cf4\i global.sl_time\cf0\i0 , reportez-vous au paragraphe \b 3.3 - Variables - Globales\b0 ).\par
\par
\ul Exemples:\ulnone\par
\par
\cf2\b\f1 SL_set_time(8); // R\'e8gle l'horloge \'e0 8 heures du matin\cf0\b0\par
\cf2\b\par
SL_set_time(15.7); // R\'e8gle l'horloge \'e0 15 heures et 42 minutes\cf0\b0\f0\par
\cf2\b\f1\par
with obj_engine SL_set_time(15.7); // R\'e8gle l'horloge \'e0 partir d'un objet n'\'e9tant pas l'objet engine\par
\cf0\lang1033\b0\f0\par
}
 