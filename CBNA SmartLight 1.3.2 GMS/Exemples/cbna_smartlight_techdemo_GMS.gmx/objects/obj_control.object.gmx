<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1500</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_fps         = false; // Affichage des FPS
draw_time        = true;  // Affichage de l'horloge
draw_map         = 1;     // Affichage de la minimap
draw_tods        = true;  // Affichage du slider jour/nuit
grab_toggle      = false; // Activation du mode de déplacement des objets
grab_active      = false; // Détermine si le déplacement d'objets avec la souris est actif ou non
transform_toggle = false; // Activation du mode de transformation de obj_character

// Variables relatives au fade out du curseur
mouse_xprev = mouse_x;
mouse_yprev = mouse_y;
mouse_counter = 0;

// Active/désactive certaines commandes du dev mode
global.dev = false;

// Police
draw_set_font(fnt_arial_12);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Transitions entre les rooms
// Les objets light sont détruits manuellement afin de s'assurer que les surfaces soient ôtées de la mémoire

if room = room1
{ if obj_character.x&gt;2550 &amp;&amp; obj_character.y&gt;2985
 { instance_activate_object(obj_light01);
   instance_activate_object(obj_light_torch);
   with obj_light01     instance_destroy();
   with obj_light_torch instance_destroy();
   with obj_engine SL_engine_free();
   room = room2;
   obj_character.x = 350;
   obj_character.y = 45;
   obj_character.image_angle = 270}};
   
else if room = room2
{ if obj_character.x&lt;400 &amp;&amp; obj_character.y&lt;30
 { instance_activate_object(obj_light01);
   instance_activate_object(obj_light_torch);
   with obj_light01     instance_destroy();
   with obj_light_torch instance_destroy();
   with obj_engine SL_engine_free();
   room = room1;
   obj_character.x = 2600;
   obj_character.y = 2950;
   obj_character.image_angle = 90}};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Commandes clavier
if keyboard_check_pressed(ord('F')) draw_fps  = !draw_fps;
if keyboard_check_pressed(ord('T')) draw_time = !draw_time;
if keyboard_check_pressed(ord('D')) draw_tods = !draw_tods;
if keyboard_check_pressed(ord('M')) &amp;&amp;  global.dev {draw_map+=1 if draw_map&gt;6 draw_map=0};
if keyboard_check_pressed(ord('M')) &amp;&amp; !global.dev {draw_map+=1 if draw_map&gt;1 draw_map=0};
if keyboard_check_pressed(ord('S')) room_speed = get_integer("room_speed:",room_speed);
if keyboard_check_pressed(ord('G')) grab_toggle = !grab_toggle;
if keyboard_check_pressed(vk_backspace) game_restart();
if keyboard_check_pressed(vk_escape) game_end();

// Pop-up menu

/* show_menu_pos() n'est plus disponible dans GameMaker:Studio. */

/*
if mouse_check_button_pressed(mb_right)
{
    ent = show_menu_pos(window_get_x()+mouse_x-view_xview,window_get_y()+mouse_y-view_yview,"Modifier l'heure  (C)|Modifier les FPS  (S)|Afficher le slider horloge  (D)|Afficher la carte  (M)|Afficher l'heure  (T)|Afficher les FPS  (F)",-1)
    switch ent
    {
      case 0: with obj_engine { var time; time=get_integer("Heure:",global.sl_time) if time&gt;=0 &amp;&amp; time&lt;24 SL_set_time(time) else show_message("Valeur incorrecte") }; break;
      case 1: room_speed = get_integer("room_speed:",room_speed); break;
      case 2: draw_tods  = !draw_tods; break;
      case 3: { draw_map+=1 if draw_map&gt;1 draw_map=0 }; break;
      case 4: draw_time  = !draw_time; break;
      case 5: draw_fps   = !draw_fps;
    }
}
*/

// Désactivation des instances hors de la view
if room=room2
{
//instance_deactivate_object(obj_light_torch);
instance_deactivate_object(obj_light01);
instance_deactivate_object(obj_light02);
instance_activate_region(view_xview[0]-400,view_yview[0]-400,view_wview[0]+800,view_hview[0]+800,true);
}

//instance_deactivate_object(obj_light_torch);
//instance_deactivate_object(obj_light01);
//instance_deactivate_object(obj_light02);
instance_deactivate_object(obj_vehicle);
instance_deactivate_object(obj_crate01);
instance_deactivate_object(obj_crate02);
instance_deactivate_object(obj_crate03);
instance_deactivate_object(obj_shape01);
instance_deactivate_object(obj_shape03);
instance_deactivate_object(obj_shape04);
instance_deactivate_object(obj_bush01);
//instance_deactivate_object(obj_plant01);
instance_deactivate_object(obj_shadow_mask);
//instance_deactivate_object(obj_fire);
instance_deactivate_object(obj_ball);

     if room = room1 instance_activate_region(view_xview[0]-250,view_yview[0]-250,view_wview[0]+500,view_hview[0]+500,true);
else if room = room2 instance_activate_region(view_xview[0]-120,view_yview[0]-120,view_wview[0]+240,view_hview[0]+240,true); // 80 / 160 par défaut
else instance_activate_region(view_xview[0]-250,view_yview[0]-250,view_wview[0]+500,view_hview[0]+500,true);

instance_deactivate_object(obj_plant01);
//instance_deactivate_object(obj_fire);
//instance_deactivate_object(obj_ball);
instance_activate_region(view_xview[0],view_yview[0],view_wview[0],view_hview[0],true);

// Déplacement des objets avec la souris
if global.dev &amp;&amp; grab_toggle
{
    if mouse_check_button_pressed(mb_left)
    {
        grab_active = true;
        grab_id = collision_point(mouse_x,mouse_y,all,true,true);
        
        if instance_exists(grab_id)
        {
            obj_character.torch = !obj_character.torch;
            grab_len = point_distance (mouse_x,mouse_y,grab_id.x,grab_id.y);
            grab_dir = point_direction(mouse_x,mouse_y,grab_id.x,grab_id.y);
        }
    }
    if mouse_check_button_released(mb_left) grab_active = false;
    if grab_active if instance_exists(grab_id) with grab_id { x=mouse_x+lengthdir_x(other.grab_len,other.grab_dir) y=mouse_y+lengthdir_y(other.grab_len,other.grab_dir) };
}

// Transform mode
if global.dev &amp;&amp; mouse_check_button_pressed(mb_right) &amp;&amp; transform_toggle
{
    change_id = collision_point(mouse_x,mouse_y,all,true,true);
    if instance_exists(change_id) with obj_character { sprite_index=other.change_id.sprite_index image_xscale=other.change_id.image_xscale image_yscale=other.change_id.image_yscale };
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Génère des nuages
//if room!=room2 repeat(15) instance_create(random(room_width),random(room_height),obj_cloud);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room = room1 instance_create(550,1010,obj_character);
if room = room2 instance_create(350,45,obj_character);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var c1, c2;

// Affichage du slider jour/nuit
if draw_tods &amp;&amp; room!=room2
{
tods_w  = view_wview*0.7;
tods_x  = view_xview+(view_wview-tods_w)/2;
tods_y  = view_yview+view_hview-30;
tods_cx = tods_x+(global.sl_time/24)*tods_w;

if !mouse_check_button(mb_left) tods_g = false;
else if mouse_check_button(mb_left) &amp;&amp; point_distance(tods_cx-16,tods_y,mouse_x,mouse_y)&lt;45 tods_g = true;

if tods_g
{
  tods_cx = mouse_x;
  if mouse_x&lt;tods_x tods_cx=tods_x else if mouse_x&gt;tods_x+tods_w tods_cx=tods_x+tods_w;
  with obj_engine SL_set_time((other.tods_cx-other.tods_x)/other.tods_w*24);
}

draw_set_blend_mode(bm_one);
draw_sprite_ext(spr_tods,0,tods_x,tods_y,tods_w/32,1,0,c_white,1);
draw_sprite_ext(spr_tods,1,tods_cx-16,tods_y,1,1,0,c_white,1);
draw_sprite_ext(spr_tods,2,tods_x-30,tods_y,1,1,0,c_white,1);
draw_sprite_ext(spr_tods,3,tods_x+tods_w,tods_y,1,1,0,c_white,1);
draw_set_blend_mode(bm_normal);

//draw_line(tods_x,tods_y,tods_x+tods_w,tods_y);
//draw_line(tods_cx,tods_y-5,tods_cx,tods_y+5);
}


// Affichage de la minimap
if draw_map &gt; 0
{
    if draw_map=1 or draw_map=2 or draw_map=3      {map_w=room_width/30 map_h=room_height/30};
    else if draw_map=4 or draw_map=5 or draw_map=6 {map_w=room_width/10 map_h=room_height/10};
    map_x=view_xview[view_current]+view_wview[view_current]-map_w-1;
    map_y=view_yview[view_current];
    
    draw_set_color(c_white);
    draw_set_alpha(0.2);
    if draw_map&lt;=3 {if room=room2 map_texid=1 else map_texid=0 draw_sprite_ext(spr_minimap,map_texid,map_x,map_y,1,1,0,c_white,0.7)};
    else draw_rectangle(map_x,map_y,map_x+map_w,map_y+map_h,0);
    draw_set_alpha(1);
    
    if draw_map=1 or draw_map=4 with obj_character draw_point(other.map_x+x/(room_width/other.map_w),other.map_y+y/(room_height/other.map_h));
    if draw_map=2 or draw_map=5 with all draw_point(other.map_x+x/(room_width/other.map_w),other.map_y+y/(room_height/other.map_h));
    if draw_map=3 or draw_map=6 with all if sprite_exists(sprite_index) draw_sprite_ext(sprite_index,image_index,other.map_x+x/(room_width/other.map_w),other.map_y+y/(room_height/other.map_h),image_xscale*(1/(room_width/other.map_w)),image_yscale*(1/(room_height/other.map_h)),image_angle,c_white,1);
    
    draw_set_alpha(0.6);
    draw_rectangle(map_x,map_y,map_x+map_w,map_y+map_h,1);
    draw_rectangle(map_x+view_xview[view_current]/(room_width/map_w),map_y+view_yview[view_current]/(room_height/map_h),map_x+view_xview[view_current]/(room_width/map_w)+view_wview[view_current]/(room_width/map_w),map_y+view_yview[view_current]/(room_height/map_h)+view_hview[view_current]/(room_height/map_h),1);
    draw_set_color(c_black);
    
    // Déplace le personnage par clic sur la minimap
    if global.dev &amp;&amp; mouse_check_button(mb_middle) &amp;&amp; mouse_x&gt;=map_x &amp;&amp; mouse_x&lt;=map_x+map_w &amp;&amp; mouse_y&gt;=map_y &amp;&amp; mouse_y&lt;=map_y+map_h
    {
        obj_character.x = (mouse_x-map_x)*(room_width/map_w);
        obj_character.y = (mouse_y-map_y)*(room_height/map_h);
    }
}

// Affichage de l'horloge
if draw_time
{
    draw_set_color(c_white);
    draw_set_alpha(0.85);
    if draw_fps yy=34 else yy=10;
    draw_text(view_xview[view_current]+10,view_yview[view_current]+yy,string(global.sl_time-frac(global.sl_time))+"h "+string(floor(60*frac(global.sl_time))));
    draw_set_alpha(1);
    draw_set_color(c_black);
}

// Affichage du compteur de FPS
if draw_fps
{
    draw_fps_x = 10;
    draw_fps_y = 10;
    
    draw_set_color(c_white) draw_set_alpha(0.3);
    if room_speed&lt;100 draw_rectangle(view_xview[view_current]+draw_fps_x-5,view_yview[view_current]+draw_fps_y-5,view_xview[view_current]+draw_fps_x+95,view_yview[view_current]+draw_fps_y+20,0);
    else draw_rectangle(view_xview[view_current]+draw_fps_x-5,view_yview[view_current]+draw_fps_y-5,view_xview[view_current]+draw_fps_x+110,view_yview[view_current]+draw_fps_y+20,0);
    draw_set_color(c_black) draw_set_alpha(1);
    
    if fps=room_speed or fps=room_speed-1   {c1=c_black c2=c1};
    if fps&gt;room_speed                       {c1=c_black c2=c_green};
    if fps&gt;room_speed/2 &amp;&amp; fps&lt;room_speed-1 {c1=c_black c2=c_red};
    if fps&lt;=room_speed/2                    {c1=c_red   c2=c1};
    draw_text_color(view_xview[view_current]+draw_fps_x,view_yview[view_current]+draw_fps_y,"FPS: "+string(fps)+" / "+string(room_speed),c1,c1,c2,c2,1);
}

// Affichage du curseur
if mouse_x=mouse_xprev &amp;&amp; mouse_y=mouse_yprev {if mouse_counter&gt;0 mouse_counter-=1} else mouse_counter=room_speed*3;
mouse_xprev = mouse_x;
mouse_yprev = mouse_y;

draw_set_blend_mode(bm_add);
draw_sprite_ext(spr_cursor,0,mouse_x,mouse_y,1,1,0,c_white,mouse_counter/room_speed);
draw_set_blend_mode(bm_normal);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
